import ioPlus;
FindMaximum {
	.field private test_arr.array.i32;

	.construct FindMaximum().V {
		invokespecial(this, "<init>").V;
	}

	.method public find_maximum(arr.array.i32).i32 {
		i.i32 :=.i32 1.i32;

		t1.i32 :=.i32 0.i32;
		maximum.i32 :=.i32 $2.arr[t1.i32].i32;
		Loop0:
			t2.i32 :=.i32 arraylength($2.arr.array.i32).i32;
t3.bool :=.bool i.i32  <.bool t2.i32;
			if (t3.bool ==.bool 1.bool) goto Body0;
			goto EndLoop0;
		Body0:
			value.i32 :=.i32 $2.arr[i.i32].i32;
					t4.bool :=.bool maximum.i32  <.bool value.i32;
		if (t4.bool !.bool 1.bool) goto else1;
			maximum.i32 :=.i32 value.i32;
			goto endif1;
					else1:
		endif1:
			i.i32 :=.i32 i.i32 +.i32 1.i32;
			goto Loop0;
		EndLoop0:
		ret.i32 maximum.i32;
	}

	.method public build_test_arr().i32 {
		t1.array.i32 :=.array.i32 new(array, 5.i32).array.i32;
		putfield(this, test_arr.array.i32, t1.array.i32).V;
		t3.array.i32 :=.array.i32 getfield(this, test_arr.array.i32).array.i32;

		t2.i32 :=.i32 0.i32;
		t3[t2.i32].i32 :=.i32 14.i32;
		t5.array.i32 :=.array.i32 getfield(this, test_arr.array.i32).array.i32;

		t4.i32 :=.i32 1.i32;
		t5[t4.i32].i32 :=.i32 28.i32;
		t7.array.i32 :=.array.i32 getfield(this, test_arr.array.i32).array.i32;

		t6.i32 :=.i32 2.i32;
		t7[t6.i32].i32 :=.i32 0.i32;
		t9.array.i32 :=.array.i32 getfield(this, test_arr.array.i32).array.i32;

		t8.i32 :=.i32 3.i32;
		t9[t8.i32].i32 :=.i32 0.i32 -.i32 5.i32;
		t11.array.i32 :=.array.i32 getfield(this, test_arr.array.i32).array.i32;

		t10.i32 :=.i32 4.i32;
		t11[t10.i32].i32 :=.i32 12.i32;
		ret.i32 0.i32;
	}

	.method public get_array().array.i32 {
		t1.array.i32 :=.array.i32 getfield(this, test_arr.array.i32).array.i32;
		ret.array.i32 t1.array.i32;
	}

	.method public static main(args.array.String).V {
		fm.FindMaximum :=.FindMaximum new(FindMaximum).FindMaximum;
		invokespecial(fm.FindMaximum,"<init>").V;
		invokevirtual(fm.FindMaximum, "build_test_arr").i32;
		t2.array.i32 :=.array.i32 invokevirtual(fm.FindMaximum, "get_array").array.i32;
		max.i32 :=.i32 invokevirtual(fm.FindMaximum, "find_maximum", t2.array.i32).i32;
		invokestatic(ioPlus, "printResult", max.i32).V;
		ret.V;
	}
}