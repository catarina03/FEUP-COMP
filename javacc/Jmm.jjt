options
{
    LOOKAHEAD=1;
    NODE_SCOPE_HOOK=true;
}

PARSER_BEGIN(Jmm)

import pt.up.fe.comp.jmm.report.*;
import java.util.ArrayList;
//import java.lang.*;

public class Jmm{

   public int errorCounter = 0;
   public int parenthesisCounter = 0;
   public ArrayList<Report> reports = new ArrayList<Report>();


   public static void main(String args[]) throws ParseException {
      System.out.println("Write an arithmetic expression:");
      Jmm myJmm = new Jmm(System.in);
      SimpleNode root = myJmm.While(); // returns reference to root node
         
      root.dump(""); // prints the tree on the screen
   }

  void jjtreeOpenNodeScope(Node n) {
       ((SimpleNode)n).put("line", Integer.toString(getToken(1).beginLine));
       ((SimpleNode)n).put("col", Integer.toString(getToken(1).beginColumn));
   }

   void jjtreeCloseNodeScope(Node n) {
   }
	
}

PARSER_END(Jmm)

SKIP :
{
	" " | "\r" | "\t" | "\n" | <"//"(~[ "\n", "\r" ]) * ("\n" | "\r" | "\r\n")>  
   |  <"/*" (~["*"])* "*" ("*" | ~[ "*", "/" ](~["*"])* "*")* "/">
}



TOKEN:
{ 
   <INTEGER: (["0"-"9"])+ >
  // |  <LF: "\n" >
   |  <IF: "if" >
   |  <ELSE: "else" >
   |  <WHILE: "while" >
   |  <PUBLIC: "public" >
   |  <NEW: "new" >
   |  <INT: "int" >
   |  <TRUE: "true" >
   |  <FALSE: "false" >
   |  <THIS: "this" >
   |  <VOID: "void" >
   |  <MAIN: "main" >
   |  <STRING: "String" >
   |  <CLASS: "class" >
   |  <STATIC: "static" >
   |  <LENGTH: "length" >
   |  <RETURN: "return" >
   |  <IMPORT: "import" >
   |  <BOOLEAN: "boolean" >
   |  <EXTENDS: "extends" >
   |  <LBRACKET: "{" >
   |  <RBRACKET: "}" >
   |  <LPAR: "(" >
   |  <RPAR: ")" >
   |  <LSQRBRACKET: "[" >
   |  <RSQRBRACKET: "]" >
   |  <SEMICOLON: ";" >
   |  <COMMA: "," >
   |  <EQUALS: "=" >
   |  <AND: "&&" >
   |  <LESS: "<" >
   |  <PLUS: "+" >
   |  <MINUS: "-" >
   |  <MUL: "*" >
   |  <DIV: "/" >
   |  <DOT: "." >
   |  <NOT: "!" >
   | <IDENTIFIER: ["a"-"z", "A"-"Z", "_", "$"](["a"-"z", "A"-"Z", "0"-"9", "_", "$"])* >
   
 //  |  <IDENTIFIEROBJECT: ["A"-"Z"](["a"-"z", "A"-"Z", "0"-"9", "_", "$"])* >
   //|  <IDENTIFIER: ["a"-"z", "_", "$"](["a"-"z", "A"-"Z", "0"-"9", "_", "$"])* >

}

SimpleNode Program(): {}
{
   try {
      ImportDeclaration() ClassDeclaration() <EOF> 
   } catch(Exception e) {
       //e.printStackTrace();
   }

   {return jjtThis;} // Java code inside brackets
}

void ImportDeclaration() #Import : {Token t;}
{
   ( <IMPORT> t = <IDENTIFIER> (<DOT> <IDENTIFIER> )*{jjtThis.put("importObject", t.image);} <SEMICOLON> )*
}

void ClassDeclaration() #Class : {Token t,w;}
{
   <CLASS> t = <IDENTIFIER>{jjtThis.put("className", t.image);} ( <EXTENDS> w=<IDENTIFIER>{jjtThis.put("classExtends", w.image);} #Extends )? <LBRACKET> ( VarDeclaration() )* ( MethodDeclaration() )* <RBRACKET>
}

void VarDeclaration() #VarDeclaration: {Token t;}
{
   Type() t = <IDENTIFIER>{jjtThis.put("variable", t.image);} <SEMICOLON>
}

void ArgDeclaration() #ArgDeclaration: {Token t;}
{
   Type() t = <IDENTIFIER>{jjtThis.put("variable", t.image);}
}

void MethodDeclaration() #MethodDeclaration: {Token t,w,x,y;}
{
   <PUBLIC>
   (
      (
          Type() #ReturnType t=<IDENTIFIER>{jjtThis.put("functionName", t.image);}
          <LPAR> { this.parenthesisCounter++; }
            ( 
               ArgDeclaration()
               (
                   <COMMA> ArgDeclaration()
               )* 
            )?
          <RPAR> { parenthesisCounter--; }
          <LBRACKET>
              MethodBody()
              <RETURN> Expression() #Return <SEMICOLON>
          <RBRACKET>
      )
      |
      (
          <STATIC> <VOID> <MAIN> #Main
          <LPAR> { this.parenthesisCounter++; } <STRING> <LSQRBRACKET> <RSQRBRACKET> y=<IDENTIFIER>{jjtThis.put("variable", y.image);} #MainArguments <RPAR> { parenthesisCounter--; }
          <LBRACKET>
              MethodBody()
          <RBRACKET>
      )
   )

}

void MethodBody() #MethodBody: {}
{
    ( LOOKAHEAD(2) VarDeclaration() )* ( Statement() )*
}

void Type() #Type: {Token t;}
{
   t = <INT> ( <LSQRBRACKET> <RSQRBRACKET> #IntArrayVarType )?{jjtThis.put("type", t.image);}
   | t = <BOOLEAN>{jjtThis.put("type", t.image);} 
   | t = <IDENTIFIER>{jjtThis.put("type", t.image);} 
   
}


void Statement() #void: {}
{
   StatementWithID() | StatementWithoutID()
}

void StatementWithID() #IDstatement : {Token t;}
{
   t=<IDENTIFIER>{jjtThis.put("ID", t.image);}   
   (  
      ( <EQUALS> Expression() <SEMICOLON> #VarAssignment )
   | 
      ( <LSQRBRACKET> Expression() <RSQRBRACKET> <EQUALS> Expression() <SEMICOLON> #ArrayAssignment )
   |
      ( ExpressionDOT() <SEMICOLON> )
   )
}

void StatementWithoutID() #void : {}
{
   While() 
   | IfElse()
   | <LBRACKET> ( Statement() )* <RBRACKET>
   | ExpressionWithoutID() <SEMICOLON>
}

void Condition() #Condition: {}
{
   <LPAR> { this.parenthesisCounter++; }
     Expression()
   <RPAR> { this.parenthesisCounter--; }
}

void IfElse() #If : {}
{
   <IF> Condition() Statement() <ELSE> Statement()
}

SimpleNode While() #While : {}
{
   <WHILE>
   try {
      <LPAR> { this.parenthesisCounter++; }
        Expression()
      <RPAR> { this.parenthesisCounter--; }
   } catch (ParseException e) {
      this.errorCounter++;
      reports.add(new Report(ReportType.ERROR, Stage.SYNTATIC, getToken(0).beginLine ,e.getMessage()));
      //System.out.println(this.errorCounter);

      //System.out.println("Exception on WHILE CONDITION caught.");
      
      error_skipto(RPAR);

      if(this.errorCounter == 10){
         System.exit(0);
      }
   }
   Statement()


   {return jjtThis;} // Java code inside brackets
}



void Expression() #void :{}
{
   ExpressionSwitchFromAND() ExpressionAND()
}

void ExpressionAND() #void :{}         
{
   ( <AND> ExpressionSwitchFromAND() #And ExpressionAND() )
   | 
   {}
}

void ExpressionSwitchFromAND() #void: {}        
{
   ExpressionSwitchFromLESS() ExpressionLESS() 
}

void ExpressionLESS() #void :{}           
{
   ( <LESS> ExpressionSwitchFromLESS() #Less ExpressionLESS() )
   | 
   {}
}

void ExpressionSwitchFromLESS() #void : {}         
{
   ExpressionSwitchFromPLUSMINUS() ExpressionPLUSMINUS()
}

void ExpressionPLUSMINUS() #void :{}
{
   ( <PLUS> ExpressionSwitchFromPLUSMINUS() #Plus ExpressionPLUSMINUS() )
   |
   ( <MINUS> ExpressionSwitchFromPLUSMINUS() #Minus ExpressionPLUSMINUS() )
   |
   {}
}

void ExpressionSwitchFromPLUSMINUS() #void :{}
{
   ExpressionSwitchFromMULDIV() ExpressionMULDIV()
}

void ExpressionMULDIV() #void :{}
{
   ( <MUL> ExpressionSwitchFromMULDIV() #Mul ExpressionMULDIV() )
   |
   ( <DIV> ExpressionSwitchFromMULDIV() #Div ExpressionMULDIV() )
   |
   {}
}

void ExpressionSwitchFromMULDIV() #void :{}
{
   ExpressionSwitchFromDOT() ExpressionDOT()
}

void ExpressionDOT() #void: {Token t;}
{
    (
       <DOT>
       (
           t=<LENGTH>{jjtThis.put("DotMethodCall", t.image);}
       |
          t=<IDENTIFIER>
             <LPAR> { this.parenthesisCounter++; }
                 ( Expression()
                    ( <COMMA> Expression() )*
                 )?
             <RPAR> { this.parenthesisCounter--; }
          {jjtThis.put("DotMethodCall", t.image);}
       ) #DotMethodCall
       ExpressionArrayIndexing() ExpressionDOT()
   )
   | 
   {}
}

void ExpressionSwitchFromDOT() #void: {}
{
   ExpressionTerminal() ExpressionArrayIndexing()
}

//TODO: verificar se esta anotação AST funciona!!! e fica no sítio correto
void ExpressionArrayIndexing() #void  :{}
{
   ( <LSQRBRACKET> Expression() #ArrayAccess <RSQRBRACKET> ExpressionArrayIndexing() )
   |
   {}
}


//Expressions without ids
void ExpressionWithoutID() #void : {}
{
    ExpressionSwitchFromANDWithoutID() ExpressionAND()
}

void ExpressionSwitchFromANDWithoutID() #void : {}
{
    ExpressionSwitchFromLESSWithoutID() ExpressionLESS()
}

void ExpressionSwitchFromLESSWithoutID() #void : {}
{
    ExpressionSwitchFromPLUSMINUSWithoutID() ExpressionPLUSMINUS()
}

void ExpressionSwitchFromPLUSMINUSWithoutID() #void : {}
{
    ExpressionSwitchFromMULDIVWithoutID() ExpressionMULDIV()
}

void ExpressionSwitchFromMULDIVWithoutID() #void : {}
{
    ExpressionSwitchFromDOTWithoutID() ExpressionDOT()
}

void ExpressionSwitchFromDOTWithoutID() #void: {}
{
    ExpressionTerminalWithoutID() ExpressionArrayIndexing()
}


//TERMINAL BLOCKS

void ExpressionTerminal() #ExpressionTerminal: {Token t;}
{
   ExpressionTerminalWithoutID()
   |
   t=<IDENTIFIER>{jjtThis.put("ID", t.image);}
}

void ExpressionTerminalWithoutID() #Terminal : {Token t;}
{
   t=<INTEGER>{jjtThis.put("Integer", t.image);}
      | <TRUE> #BooleanTrue
      | <FALSE>  #BooleanFalse
      | <THIS> #This
      | <NEW>
      ( 
         ( <INT> <LSQRBRACKET> Expression() <RSQRBRACKET> ) #IntArrayVar
        |
         ( t=<IDENTIFIER>{jjtThis.put("Object", t.image);} <LPAR> { this.parenthesisCounter++; } <RPAR> { this.parenthesisCounter--; } ) #TypeObject
      ) #New
      | <NOT> Expression() #Not
      | <LPAR> { this.parenthesisCounter++; } Expression() <RPAR> { this.parenthesisCounter--; }  //TODO: COLOCAR AQUI ANOTAÇAO?
}


JAVACODE
void error_skipto(int kind) {
   // ParseException e = generateParseException();  // generate the exception object
   // System.out.println(e.toString());  // print the error message
  
   Token t;
   // consume tokens all the way up to a token of "kind" - use a do-while loop
   // rather than a while because the current token is the one immediately before
   // the erroneous token (in our case the token immediately before what should
   // have been "if"/"while".
   do {
      t = getNextToken();

      //System.out.println("Next token: " + t.image);

      if(t.kind == LPAR){
          this.parenthesisCounter++;
          //System.out.println("Found parenthesis inside parenthesis");
         error_skipto(RPAR);
      }

      if(t.kind == RPAR){
        this.parenthesisCounter--;
      }
   }
   while ( (t.kind != kind && t.kind != EOF ) || this.parenthesisCounter != 0);
}
